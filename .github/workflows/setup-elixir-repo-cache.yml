name: Setup Dependencies

# Description:
# Install Elixir and Erlang from `.tool-versions` and compile project dependencies and dialyzer PLTs
#
# NOTES:
# - Reusable workflows have no description tag, hence this comment section
# - An external action is used 'marocchino/tool-versions-action' and pinned to a commit SHA for security
# - You can't call a reusable workflow (such as this) from another reusable workflow

on:
  workflow_call:
    inputs:
      action-cache-version:
        type: string
        default: 'v1'
        description: Setting to a new string will bust the Elixir dependency cache.  Useful if CI gets into a non-working state due to cached files.
        required: false
      build-plt:
        type: boolean
        default: true
        description: Setting false will skip building the PLT (for use of this workflow in releases)
        required: false

    outputs:
      config:
        description: Managed JSON string for CI config
        value: ${{ jobs.setup-elixir.outputs.config }}
      playwright-image-exists:
        description: Okayt
        value: ${{ jobs.setup-playwright.outputs.image-exists }}
      playwright-image-name:
        description: Container
        value: ${{ jobs.setup-playwright.outputs.image-name }}
          
      
env:
  ImageOS: ubuntu22
  cache-path: |
    deps
    _build
  container: ghcr.io/merchant-ly/github-action-playwright

jobs:
  setup-elixir:
    name: Setup Elixir
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      MIX_ENV: test
    outputs:
      config: ${{ steps.config.outputs.config }}

    steps:
      - name: Checkout Github repo
        uses: actions/checkout@v3

      - name: Set Config
        id: config
        uses: merchant-ly/.github/.github/actions/set-config@dev
        with:
          version: "${{ inputs.action-cache-version }}-${{ hashFiles('mix.lock') }}"

      - name: Setup Elixir
        id: setup-deps
        uses: erlef/setup-beam@v1
        with:
          version-type: strict
          elixir-version: '${{ steps.config.outputs.elixir-version }}'
          otp-version: '${{ steps.config.outputs.otp-version }}'

      - name: Restore cached deps
        uses: actions/cache@v3
        id: cached-deps
        with:
          path: ${{ steps.config.outputs.cache-path }}
          key: ${{ steps.config.outputs.cache-key }}
        # Note no restore-keys defined to avoid possible stale cache problems

      - name: Install deps
        if: steps.cached-deps.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix deps.get

      - name: Build deps
        if: steps.cached-deps.outputs.cache-hit != 'true'
        run: mix deps.compile --skip-umbrella-children

      - name: Build PLT
        if: inputs.build-plt && steps.cached-deps.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

  setup-playwright:
    name: Setup Playwright
    runs-on: ubuntu-latest
    timeout-minutes: 1
    env:
      MIX_ENV: test
    outputs:
      image-exists: ${{ steps.playwright-version.output.image-exists }}
      image-name: ${{ steps.playwright-version.output.image-name }}

    steps:
      - name: Checkout Github repo
        uses: actions/checkout@v3

      - name: Get Repo Version
        uses: merchant-ly/.github/.github/actions/get-playwright-version@dev
        id: playwright
        with:
          working-directory: acceptance_test

      - name: Check GHCR image
        id: playwright-version
        run: |
          version=${{ steps.playwright.outputs.version }}
          image-name=`echo "${container}@v${version}"`

          entries=docker inspect ${image-name}
          image-exists=`echo "$entries" | jq 'length != 0'`
          {
            echo "image-exists=$image-exists"
            echo "image-name=$image-name"
          } >> $GITHUB_OUTPUT
